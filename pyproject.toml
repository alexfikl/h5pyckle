[build-system]
build-backend = "hatchling.build"
requires = [
    "hatchling>=1.10",
]

[project]
name = "h5pyckle"
version = "2024.10"
description = "Extensible pickling using HDF5"
readme = "README.rst"
keywords = [
    "hdf5",
    "pickle",
    "storage",
]
license = "MIT"
maintainers = [
    { name = "Alexandru Fikl", email = "alexfikl@gmail.com" },
]
authors = [
    { name = "Alexandru Fikl", email = "alexfikl@gmail.com" },
]
requires-python = ">=3.10"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering",
    "Topic :: Utilities",
]
dependencies = [
    "h5py>=3.10",
    "numpy>=2.1",
    "typing-extensions>=4.1",
]
optional-dependencies.dev = [
    "pyproject-fmt",
    "reuse",
    "typos",
    "uv",
]
optional-dependencies.docs = [
    "sphinx>=6",
    "sphinx-autoapi",
    "sphinx-book-theme",
]
optional-dependencies.test = [
    "basedpyright",
    "cloudpickle",
    "pytest",
    "ruff",
    "types-dataclasses",
    "unyt",
]
urls.Documentation = "https://h5pyckle.readthedocs.io"
urls.Repository = "https://github.com/alexfikl/h5pyckle"

[tool.hatch.build.targets.sdist]
exclude = [
    ".github",
    ".ci",
    "docs/build.sphinx",
]

[tool.hatch.build.targets.wheel]
packages = [
    "src/h5pyckle",
]

[tool.ruff]
target-version = "py310"
line-length = 88

preview = true
lint.select = [
    "A",   # flake8-builtins
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "E",   # flake8
    "F",   # flake8
    "FBT", # flake8-boolean-trap
    "G",   # flake8-logging-format
    "I",   # flake8-isort
    "ISC", # flake8-implicit-str-concat
    "N",   # pep8-naming
    "NPY", # numpy
    "PL",  # pylint
    "PT",  # flake8-pytest-style
    "Q",   # flake8-quotes
    "RUF", # ruff
    "S",   # flake8-bandit
    "SIM", # flake8-simplify
    "TC",  # flake8-type-checking
    "UP",  # pyupgrade
    "W",   # flake8
]
lint.ignore = [
    "E402",    # module-import-not-at-top-of-file
    "ISC001",  # single-line-implicit-string-concatenation
    "PLC0415", # import-outside-top-level
    "PLR0913", # too-many-arguments
    "PLR0914", # too-many-locals
    "PLR0915", # too-many-statements
    "PLR2004", # magic-value-comparison
    "S101",    # assert
    "S102",    # exec-builtin
    "S301",    # suspicious-pickle-usage
    "S403",    # suspicious-pickle-import
    "SIM108",  # use-ternary-operator
    "UP037",   # quoted-annotation
]

lint.flake8-pytest-style.mark-parentheses = false

lint.flake8-quotes.docstring-quotes = "double"
lint.flake8-quotes.inline-quotes = "double"
lint.flake8-quotes.multiline-quotes = "double"
lint.isort.known-first-party = [
    "h5pyckle",
]
lint.isort.required-imports = [
    "from __future__ import annotations",
]

[tool.pytest.ini_options]
testpaths = "tests"
markers = [
    "meshmode: mark a test that uses meshmode",
]

[tool.basedpyright]
pythonVersion = "3.10"
pythonPlatform = "All"

reportImplicitStringConcatenation = "none"
reportUnknownMemberType = "hint"
reportExplicitAny = "none"
reportAny = "none"
